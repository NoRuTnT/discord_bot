pipeline {
    agent any
    tools {
        gradle 'gradle'
        jdk 'jdk17'
    }
    environment {
        // 환경 변수를 선언하고 초기화
        imageName = "norutnt/discord"
        registryCredential = "dockerhub"
        dockerImage = ''

        releaseServerAccount = 'ubuntu'
        releaseServerUri = 'maplebot.duckdns.org'
        releasePort = '8081'
        JAVA_HOME = 'tool jdk17'

        GIT_BRANCH_SOURCE = "${env.GIT_BRANCH_SOURCE}"
        GIT_BRANCH_TARGET = "${env.GIT_BRANCH_TARGET}"
    }

    triggers {
        genericTrigger(
            genericVariables: [
                [key: 'GIT_BRANCH_SOURCE', value: '$.pull_request.head.ref'],
                [key: 'GIT_BRANCH_TARGET', value: '$.pull_request.base.ref']
            ],
            causeString: 'Triggered on $GIT_BRANCH_SOURCE by $GIT_BRANCH_TARGET',
            token: 'moonabcd',
            printContributedVariables: true,
            printPostContent: true,
            silentResponse: false
        )
    }

    post {
        success {
            updateGitlabCommitStatus name: 'build', state: 'success'

            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                discordSend (
                content: "빌드 성공: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                webhookURL: 'https://discord.com/api/webhooks/1244521057893744640/K0VxXfx1D7SNPvyPgndzsCzXs99foluz0hZa7HfyomNz38vC9gFcad199ToLEY6ctYuW'
                )
            }
        }

        failure {
            updateGitlabCommitStatus name: 'build', state: 'failed'

            script {
                def Author_ID = sh(script: "git show -s --pretty=%an", returnStdout: true).trim()
                def Author_Name = sh(script: "git show -s --pretty=%ae", returnStdout: true).trim()
                discordSend (
                content: "빌드 실패: ${env.JOB_NAME} #${env.BUILD_NUMBER} by ${Author_ID}(${Author_Name})\n(<${env.BUILD_URL}|Details>)",
                webhookURL: 'https://discord.com/api/webhooks/1244521057893744640/K0VxXfx1D7SNPvyPgndzsCzXs99foluz0hZa7HfyomNz38vC9gFcad199ToLEY6ctYuW'
                )
            }
        }
    }

    stages {
        stage('Get Merge Request and preBuildMerge') {
            steps {
                cleanWs()
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "${env.GIT_BRANCH_SOURCE}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'PreBuildMerge', options: [mergeRemote: 'origin', mergeTarget: "${env.GIT_BRANCH_TARGET}"]]],
                        submoduleCfg: [],
                        userRemoteConfigs: [[credentialsId: 'githubtoken', url: 'https://github.com/NoRuTnT/discord_bot.git']]
                    ])
                }

            }
        }
        stage('Setup build environment') {
            steps {
                script {
                        sh 'rm -rf backend/env'
                        sh 'mkdir -p backend/env'
                        sh "chown -R jenkins:jenkins backend/env"
                        sh "chmod -R 755 backend/env"
                }

                withCredentials([file(credentialsId: 'security', variable: 'securityFile')]) {
                    script {
                        sh 'cp $securityFile backend/env/security.env'
                    }
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building...'
                 // 빌드 실행
                 dir('backend') {
                    // backend 디렉토리 안에서 빌드 실행
                    sh 'chmod +x ./gradlew'
                    sh './gradlew clean bootJar'
                }
            }
        }

        stage('Test') {
            steps {
                echo 'Test...'
                // 테스트 실행
                dir('backend') {
                    // backend 디렉토리 안에서 빌드 실행
                    sh './gradlew test'
                }
            }
        }

        stage('[Backend]Image Build & DockerHub Push') {
            when {
                expression { env.ghprbPullState != 'open' }
            }
            steps {
                dir('backend') {
                    script {
                        docker.withRegistry('', registryCredential) {
                            // 이미지 빌드
                            sh "docker build -t $imageName:$BUILD_NUMBER ."
                            sh "docker build -t $imageName:latest ."

                            // Docker Hub에 푸시
                            sh "docker push $imageName:$BUILD_NUMBER"
                            sh "docker push $imageName:latest"
                        }
                    }
                }
            }
        }

        stage('DockerHub Pull') {
            when {
                expression { env.ghprbPullState != 'open' }
            }
            steps {
                sshagent(credentials: ['ubuntu']) {
                    sh "ssh -o StrictHostKeyChecking=no $releaseServerAccount@$releaseServerUri 'sudo docker pull $imageName:latest'"
                }
            }
        }

        stage('blue-green deploy') {
            when {
                expression { env.ghprbPullState != 'open' }
            }
            steps {
                sshagent(credentials: ['ubuntu']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no ubuntu@maplebot.duckdns.org"
                    sh '/home/ubuntu/deploy.sh'
                    "
                    '''
                }
            }
        }

    }
}